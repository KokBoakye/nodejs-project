name: CI with DevSecOps

on:
  push:
    branches: [ main ]

  pull_request:
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  id-token: write 
  packages: write

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: nodejs

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::604312263409:role/githubuser
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform

      #### üê≥ Build and Push to AWS ECR ####
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_TAG=latest
          IMAGE_URI=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          
          echo "Building Docker image..."
          docker build -t $IMAGE_URI .

          echo "Pushing image to ECR..."
          docker push $IMAGE_URI

          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

      #### üß™ SAST: SonarCloud ####
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      #### ‚òÅÔ∏è IaC Scan: Checkov ####
      - name: Run Checkov (Terraform)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: ./terraform
          soft_fail: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #### üêã Container Scan: Trivy ####
      - name: Trivy scan image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_URI }}
          format: 'json'
          output: 'trivy-report.json'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      #### üåê DAST: OWASP ZAP ####
      - name: Bring up app for scanning
        run: |
          docker-compose up -d
          sleep 6

      - name: Run ZAP baseline scan
        run: |
          docker run --network host --rm owasp/zap2docker-stable \
            zap-baseline.py -t http://localhost:8080 -r zap-report.html

      #### üì§ Upload Reports ####
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            trivy-report.json
            zap-report.html
