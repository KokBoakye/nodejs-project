name: CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::604312263409:role/githubuser
          aws-region: ${{ vars.AWS_REGION }}

      # Download Terraform state from remote backend (S3)
      - name: Get EC2 Instance ID from SSM Parameter Store
        run: |
          INSTANCE_ID=$(aws ssm get-parameter \
            --name "/nodejs-app/instance-id" \
            --query "Parameter.Value" \
            --output text)

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "Fetched EC2 Instance ID: $INSTANCE_ID"


      # Set dynamic environment variables from vars and AWS
      - name: Set environment variables
        run: |
          echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ vars.IMAGE_TAG }}" >> $GITHUB_ENV

      # Deploy Docker container via SSM
      - name: Deploy Docker container via SSM
        run: |
          aws ssm send-command \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy Docker container" \
            --parameters '{
              "commands": [
                "aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com",
                "docker pull ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}",
                "docker stop nodejs-app || true",
                "docker rm nodejs-app || true",
                "docker run -d --name nodejs-app -p 80:8080 ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
              ]
            }' \
            --region "${{ vars.AWS_REGION }}"
