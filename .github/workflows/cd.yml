name: CD Pipeline 

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      packages: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::604312263409:role/githubuser
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get EC2 Instance ID from Terraform
        run: |
            cd terraform
            INSTANCE_ID=$(terraform output -raw instance_id)
            echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV


      - name: Deploy Docker container via SSM
        run: |
          aws ssm send-command \
            --instance-ids "${{ env.INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy Docker container" \
            --parameters commands='[
              "aws ecr get-login-password --region ${{ vars.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com",
              "docker pull ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ vars.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}",
              "docker stop nodejs-app || true",
              "docker rm nodejs-app || true",
              "docker run -d --name nodejs-app -p 80:8080 ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
            ]' \
            --region "${{ vars.AWS_REGION }}"
